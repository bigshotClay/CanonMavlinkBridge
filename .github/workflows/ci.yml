name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  release:
    types: [created]

env:
  BUILD_TYPE: Release
  MAVSDK_VERSION: "1.4.16"

jobs:
  lint:
    name: Code Linting
    runs-on: ubuntu-22.04

    steps:
    - uses: actions/checkout@v4

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y clang-format clang-tidy cppcheck

    - name: Check code formatting
      run: |
        find src include -name "*.cpp" -o -name "*.h" | xargs clang-format --dry-run --Werror

    - name: Run cppcheck
      run: |
        cppcheck --enable=all --error-exitcode=1 --suppress=missingIncludeSystem src/

  build:
    name: Build and Test
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-22.04, ubuntu-20.04]
        arch: [x64]
        include:
          - os: ubuntu-22.04
            arch: arm64
            use_qemu: true

    runs-on: ${{ matrix.os }}

    steps:
    - uses: actions/checkout@v4

    - name: Set up QEMU for ARM64
      if: matrix.use_qemu
      uses: docker/setup-qemu-action@v3
      with:
        platforms: arm64

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          build-essential \
          cmake \
          ninja-build \
          pkg-config \
          libusb-1.0-0-dev \
          libyaml-cpp-dev \
          curl \
          wget \
          valgrind \
          lcov \
          gcovr

    - name: Install MAVSDK
      run: |
        if [ "${{ matrix.arch }}" = "arm64" ]; then
          # For ARM64, build from source
          git clone --depth 1 --branch v${{ env.MAVSDK_VERSION }} https://github.com/mavlink/MAVSDK.git
          cd MAVSDK
          cmake -B build -S . -DCMAKE_BUILD_TYPE=${{ env.BUILD_TYPE }} -DSUPERBUILD=OFF
          cmake --build build -j$(nproc)
          sudo cmake --install build
        else
          # For x64, use pre-built packages
          wget -q https://github.com/mavlink/MAVSDK/releases/download/v${{ env.MAVSDK_VERSION }}/mavsdk_${{ env.MAVSDK_VERSION }}_ubuntu$(lsb_release -rs | tr -d .)_amd64.deb
          sudo dpkg -i mavsdk_*.deb || sudo apt-get install -f -y
        fi

    - name: Configure CMake
      run: |
        cmake_args="-B build -G Ninja -DCMAKE_BUILD_TYPE=${{ env.BUILD_TYPE }} -DBUILD_TESTING=ON -DCMAKE_EXPORT_COMPILE_COMMANDS=ON"

        # Enable code coverage for x64 Ubuntu 22.04 builds
        if [[ "${{ matrix.os }}" == "ubuntu-22.04" && "${{ matrix.arch }}" == "x64" ]]; then
          cmake_args="$cmake_args -DCMAKE_CXX_FLAGS=--coverage -DCMAKE_C_FLAGS=--coverage"
        fi

        cmake $cmake_args

    - name: Build
      run: cmake --build build --config ${{ env.BUILD_TYPE }} --parallel

    - name: Run unit tests
      run: |
        cd build
        ctest --output-on-failure --parallel

    - name: Run memory tests with Valgrind (x64 only)
      if: matrix.arch == 'x64' && matrix.os == 'ubuntu-22.04'
      run: |
        cd build
        # Run main executable with valgrind
        valgrind --tool=memcheck --leak-check=full --show-leak-kinds=all --track-origins=yes --error-exitcode=1 ./canon_mavlink_bridge --help

    - name: Generate code coverage report (Ubuntu 22.04 x64 only)
      if: matrix.arch == 'x64' && matrix.os == 'ubuntu-22.04'
      run: |
        cd build
        # Generate coverage data
        lcov --capture --directory . --output-file coverage.info
        lcov --remove coverage.info '/usr/*' '*/_deps/*' '*/tests/*' '*/test/*' '*_test.cpp' --output-file coverage_filtered.info
        lcov --list coverage_filtered.info

        # Generate HTML report
        genhtml coverage_filtered.info --output-directory coverage_html

        # Generate summary
        gcovr --xml-pretty --exclude-unreachable-branches --print-summary -o coverage.xml

    - name: Upload coverage to Codecov
      if: matrix.arch == 'x64' && matrix.os == 'ubuntu-22.04'
      uses: codecov/codecov-action@v3
      with:
        file: build/coverage_filtered.info
        flags: unittests
        name: codecov-umbrella

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: canon-mavlink-bridge-${{ matrix.os }}-${{ matrix.arch }}
        path: |
          build/bin/canon_mavlink_bridge
          build/compile_commands.json
        retention-days: 30

    - name: Upload coverage artifacts
      if: matrix.arch == 'x64' && matrix.os == 'ubuntu-22.04'
      uses: actions/upload-artifact@v4
      with:
        name: coverage-report
        path: |
          build/coverage_html/
          build/coverage.xml
          build/coverage_filtered.info
        retention-days: 30

    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results-${{ matrix.os }}-${{ matrix.arch }}
        path: build/Testing/
        retention-days: 7

  security:
    name: Security Scan
    runs-on: ubuntu-22.04
    needs: build

    steps:
    - uses: actions/checkout@v4

    - name: Run CodeQL Analysis
      uses: github/codeql-action/init@v3
      with:
        languages: cpp
        config-file: ./.github/codeql/codeql-config.yml

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          build-essential \
          cmake \
          pkg-config \
          libusb-1.0-0-dev \
          libyaml-cpp-dev

    - name: Install MAVSDK
      run: |
        wget -q https://github.com/mavlink/MAVSDK/releases/download/v${{ env.MAVSDK_VERSION }}/mavsdk_${{ env.MAVSDK_VERSION }}_ubuntu$(lsb_release -rs | tr -d .)_amd64.deb
        sudo dpkg -i mavsdk_*.deb || sudo apt-get install -f -y

    - name: Build for analysis
      run: |
        cmake -B build -DCMAKE_BUILD_TYPE=Debug
        cmake --build build -j$(nproc)

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3

  docker:
    name: Docker Build
    runs-on: ubuntu-22.04
    needs: build
    if: github.event_name == 'push' || github.event_name == 'release'

    steps:
    - uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ghcr.io/${{ github.repository }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  release:
    name: Create Release
    runs-on: ubuntu-22.04
    needs: [build, security]
    if: github.event_name == 'release'

    steps:
    - uses: actions/checkout@v4

    - name: Download artifacts
      uses: actions/download-artifact@v4
      with:
        pattern: canon-mavlink-bridge-*
        merge-multiple: true
        path: artifacts/

    - name: Create release archives
      run: |
        cd artifacts
        for dir in canon-mavlink-bridge-*; do
          if [ -d "$dir" ]; then
            tar -czf "${dir}.tar.gz" -C "$dir" .
          fi
        done

    - name: Upload release assets
      uses: softprops/action-gh-release@v1
      with:
        files: artifacts/*.tar.gz
        generate_release_notes: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}